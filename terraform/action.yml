---
name: "Deploy Terraform Infrastructure"

inputs:
  tf-api-token:
    description: "Terraform Cloud API token"
    required: true
  tf-cloud-organization:
    description: "Terraform Cloud organization name"
    required: false
    default: "kaihendry"
  environment:
    description: "Environment name (dev, staging, prod)"
    required: false
    default: "dev"
  region:
    description: "AWS region"
    required: false
    default: "eu-west-2"
  environment-variables:
    description: "Environment variables to pass to pkl evaluation"
    required: false

runs:
  using: "composite"
  steps:
      # TODO: Role lookup based on environment
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v5
      with:
        role-to-assume: arn:aws:iam::407461997746:role/github-actions-Role-56IHHM969DKJ
        aws-region: ${{ inputs.region }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token: ${{ inputs.tf-api-token }}

    - name: Setup pkl
      uses: pkl-community/setup-pkl@v0
      with:
        pkl-version: 0.28.2

    - name: Generate Terraform configuration from pkl
      shell: bash
      run: |
        # Export environment variables from input
        if [[ -n "${{ inputs.environment-variables }}" ]]; then
          # Parse and export variables (expects format: KEY1=value1 KEY2=value2)
          for var in ${{ inputs.environment-variables }}; do
            export "$var"
            echo "Exported $var"
          done
        fi
        # Show environment
        printenv
        echo "=== Generating main.tf.json from config.pkl ==="
        pkl eval -f json config.pkl | jq '.terraform' > main.tf.json
        echo "Generated main.tf.json successfully"

    - name: Terraform Init
      shell: bash
      run: terraform init

    - name: Plan
      shell: bash
      run: |
        cat main.tf.json
        ls -la
        terraform apply -auto-approve -no-color
