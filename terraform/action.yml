---
name: "Deploy Terraform Infrastructure"

inputs:
  config-file:
    description: "Path to the config.yaml file"
    required: true
  secrets:
    description: "JSON object containing secret key-value pairs"
    required: false
    default: "{}"
  tf-api-token:
    description: "Terraform Cloud API token"
    required: true
  tf-cloud-organization:
    description: "Terraform Cloud organization name"
    required: false
    default: "kaihendry"
  environment:
    description: "Environment name (dev, staging, prod)"
    required: false
    default: "dev"
  region:
    description: "AWS region"
    required: false
    default: "eu-west-2"

runs:
  using: "composite"
  steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v5
      with:
        role-to-assume: arn:aws:iam::407461997746:role/github-actions-Role-56IHHM969DKJ
        aws-region: ${{ inputs.region }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        cli_config_credentials_token: ${{ inputs.tf-api-token }}

    # print context and inputs for debugging of the action, especially details of the calling repo
    - name: Debug Info
      shell: bash
      run: |
        printenv

    - name: Copy config file and generate Terraform
      shell: bash
      run: |
        echo "=== Config YAML ==="
        cat config.yaml

        echo "=== Secrets Input ==="
        echo '${{ inputs.secrets }}'

        echo "=== Generating main.tf.json ==="
        # Parse the config and secrets, then generate JSON terraform config
        python3 << 'PYTHON_EOF'
        import yaml
        import json
        import os
        import re

        # Load config.yaml
        with open('config.yaml', 'r') as f:
            config = yaml.safe_load(f)

        # Parse secrets JSON
        secrets_json = '''${{ inputs.secrets }}'''
        secrets = json.loads(secrets_json) if secrets_json.strip() else {}

        print("Parsed secrets:", secrets)
        print("Config SSM parameters:", config.get('terraform', {}).get('ssm_parameters', []))

        # Start with the terraform section from config.yaml and inject secrets
        tf_config = config.get('terraform', {}).copy()

        # Process SSM parameters and inject secret values
        ssm_params = tf_config.get('ssm_parameters', [])
        for i, param in enumerate(ssm_params):
            param_name = param['name']
            # Extract basename - keep original format to match secrets JSON
            basename = os.path.basename(param_name)
            secret_key = basename

            print(f"Parameter {i}: name='{param_name}', basename='{basename}', secret_key='{secret_key}'")

            # Get the secret value and add it to the param
            secret_value = secrets.get(secret_key, f"MISSING_SECRET_{secret_key}")
            param['value'] = secret_value

        # Convert ssm_parameters list to terraform resource format
        if 'ssm_parameters' in tf_config:
            tf_config['resource'] = {
                'aws_ssm_parameter': {
                    f"param_{i}": param for i, param in enumerate(tf_config['ssm_parameters'])
                }
            }
            # Remove the original ssm_parameters as it's now in resource format
            del tf_config['ssm_parameters']

        # Add the terraform cloud and provider configuration
        tf_config.update({
            "terraform": {
                "required_providers": {
                    "aws": {
                        "source": "hashicorp/aws",
                        "version": "~> 5.0"
                    }
                },
                "cloud": {
                    "organization": "${{ inputs.tf-cloud-organization }}",
                    "workspaces": {
                        "name": "${{ github.event.repository.name }}-${{ inputs.environment }}"
                    }
                }
            },
            "provider": {
                "aws": {
                    "region": "${{ inputs.region }}",
                    "default_tags": {
                        "tags": {
                            "Environment": "${{ inputs.environment }}",
                            "Repository": "${{ github.event.repository.name }}",
                            "ManagedBy": "Terraform",
                            "Owner": "${{ github.actor }}",
                            "Workspace": "${{ github.event.repository.name }}-${{ inputs.environment }}"
                        }
                    }
                }
            }
        })

        # Write the JSON config
        with open('main.tf.json', 'w') as f:
            json.dump(tf_config, f, indent=2)

        print("Generated main.tf.json successfully")
        PYTHON_EOF

        echo "=== Generated main.tf.json ==="
        cat main.tf.json

    - name: Terraform Init
      shell: bash
      run: terraform init

    - name: Plan
      shell: bash
      run: |
        ls -la
        terraform apply -auto-approve -no-color
